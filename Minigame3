using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;

namespace Minigame3
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        Texture2D map, mouseTexture, bill;
        Vector2 mouseXY, objectXY;
        ButtonState previousState;

        Rectangle[] getrect; //source rectangles within map.png
        private int margin; //how much space bw strips
        private int sideBezel; //how much space bw game and frame
        private int sandwichBezel;//same
        private int numberOfPieces; //how many strips of map
        private float[] rotationCounter; //how far a piece has been rotated, mod 2pi
        private bool explanationVisibility;

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            
            // TODO: Add your initialization logic here
            base.Initialize();

        }

        //are all the pieces of the puzzle in the right position?
        private bool rightSideUp()
        {
            foreach (float f in rotationCounter)
            {
                if (f > 0f) return false;
            }
            return true;   
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            map = Content.Load<Texture2D>("mapdelveDOTcomSLASHimagesSLASHtunnels2");
            mouseTexture = Content.Load<Texture2D>("cursor");

            bill = Content.Load<Texture2D>("bill");
            explanationVisibility = false;
            objectXY = new Vector2(400, 200);

            margin = 5;
            numberOfPieces = 7;
            getrect = new Rectangle[numberOfPieces];
            rotationCounter = new float[numberOfPieces];
            Random rand = new Random();
            for (int i = 0; i < numberOfPieces; i++)
            {
                getrect[i] = new Rectangle(i * map.Width / numberOfPieces, 0, map.Width / numberOfPieces, map.Height);
                rotationCounter[i] += (MathHelper.Pi * rand.Next(2));
            }

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            Content.Unload();
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            // TODO: Add your update logic here
            mouseXY = new Vector2(Mouse.GetState().X, Mouse.GetState().Y);
            
            //if cursor is close to object, hover explanation
            if (MathHelper.Distance(mouseXY.X, objectXY.X) <= 100)
            {
                explanationVisibility = true;
            }
            else
            {
                explanationVisibility = false;
            }
            
            //when they click, rotate map components accordingly
            //for all rectangles, check if clickage within
            for (int i = 0; i < numberOfPieces; i++)
            {
                if (new Rectangle((i * map.Width / 20 / numberOfPieces) + (i - 1) * margin, 0, map.Width / 20 / numberOfPieces, map.Height / 20).Contains(mouseXY) && (Mouse.GetState().LeftButton == ButtonState.Released && previousState == ButtonState.Pressed)) 
                {
                    rotationCounter[i] = (rotationCounter[i] + MathHelper.Pi)%(MathHelper.Pi*2);
                }
            }

            previousState = Mouse.GetState().LeftButton;
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            if (rightSideUp()==true) { GraphicsDevice.Clear(Color.Black); } else { GraphicsDevice.Clear(Color.Purple); };

            // TODO: Add your drawing code here
            spriteBatch.Begin();
            //the origin vector parameter works relative to the cropped image, but scale is...?? applied after the fact?
            //destination vector reflects where origin, not (0,0), lies

            for(int i=0; i<numberOfPieces;i++){
                spriteBatch.Draw(map, new Vector2((i*(map.Width/20)/numberOfPieces)+(i-1)*margin+map.Width/20/numberOfPieces/2, map.Height/20/2), getrect[i], Color.White, rotationCounter[i], new Vector2(map.Width/numberOfPieces/2, map.Height/2), .05f, SpriteEffects.None, 0f);
            }

            spriteBatch.Draw(mouseTexture, mouseXY, new Rectangle(0, 0, mouseTexture.Width, mouseTexture.Height), Color.White);

            if(explanationVisibility == true){
                //spriteBatch.Draw(bill, mouseXY, new Rectangle(0, 0, bill.Width, bill.Height), Color.White, 0f, new Vector2(0,0), .5f, SpriteEffects.None, 0f);
            }
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}

